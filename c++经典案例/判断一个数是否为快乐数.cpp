//题目：
//编写一个算法来判断一个数是不是“快乐数”。
//一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，
//然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数

//思路：
//对于快乐数，难度在于如何每个位置上的数字的平方和，这里我们可以对n取余数得到n的个位，求其平方并累加，
//对n / 10的结果用int保存，得到去除个位的n的其他位数字，重复上述步骤，直至其他位数字求取结果为零，
//得到n的各个位置的数字的平方和，重复操作直至平方和等于1。对于非快乐数，肯定不能进入死循环，
//那么肯定循环进行到一定程度，数字会和之前出现过n重复，因此我们保存每一步骤的n，
//并在得到新的n的时候判断该数字是否出现过，出现过就为非快乐数，跳出循环
#include<iostream>
#include<cmath>
using namespace std;

//求得数字的平方和
int func01(int n)
{
	int sum = 0;
	while (n)
	{
		sum += pow( (n % 10) , 2 );
		n /= 10;
	}
	cout << sum << " ";
	return sum;
}

void test01()
{
	int n; int arr[1000] = { 0 };//创建保留数字的数组
	cin >> n;
	int len = 0;//获取n的位数
	int m = func01(n);
	while ( m != 1)
	{
		arr[len] = m;
		len++;
		n = m;
		m = func01(n);
		for (int i = 0; i < len; i++)
		{
			if (n == arr[i] && i!= len - 1)
			{
				cout << "这个数不是快乐数" << endl;
				return;
			}
		}
	}
	cout << "这个数是快乐数" << endl;
	return;
}

int main()
{
	test01();
}