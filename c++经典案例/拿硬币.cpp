//【问题描述】
//将n枚硬币摆成环状，A和B轮流拿，A先拿。
//每个人拿的时候只可以选择拿走一个或者拿走相邻的两个，谁拿完最后的硬币胜利。
//给定n <= 1000，并且假设双方都采取最优策略，输出最后的获胜者
//【输入形式】
//共一行，为n的值。
//【输出形式】
//输出一行，为获胜者的名字
//【样例输入】
//3
//【样例输出】
//B
//【样例说明】
//无论A先手拿几个硬币，B都能在后手拿完。所以B是最后的获胜者。
//【评分标准】
//对于30 % 的数据，n <= 10
//对于60 % 的数据，n <= 300
//对于100 % 的数据，n <= 1000
#include<iostream>
using namespace std;

//Alice在第一步取走1或2枚硬币后，原本的环变成长度是n - 1或n - 2的链。
//这样只要Bob在中间位置，根据链长的奇偶性，取走1或2枚硬币，
//就可以正好把所有硬币分成两个长度相同的链。
//而两个长度相同的链这是必败态，因为不论自己采取什么策略，
//对手只要在另一组采取相同的策略，就又回到了分成两个如同长度链的状态。
//这样循环下去，总会轮到某次自己没有硬币可以取，
//即对手在上一次拿走了最后一枚硬币，这时候自己就输了。

void TakeCoin(int n)
{
	if (n <= 2) cout << "A";
	else cout << "B";
}

void test01()
{
	int n;
	cin >> n;
	TakeCoin(n);
}

int main()
{
	test01();
}